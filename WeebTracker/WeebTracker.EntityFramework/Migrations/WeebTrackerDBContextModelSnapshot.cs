// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeebTracker.EntityFramework;

#nullable disable

namespace WeebTracker.EntityFramework.Migrations
{
    [DbContext(typeof(WeebTrackerDBContext))]
    partial class WeebTrackerDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.DBModels.Anime", b =>
                {
                    b.Property<int>("CollectiblesID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CollectiblesID");

                    b.ToTable("Animes");
                });

            modelBuilder.Entity("Models.DBModels.AnimeEditionInfo", b =>
                {
                    b.Property<int>("EditionID")
                        .HasColumnType("int");

                    b.Property<int>("Endepisode")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Startepisode")
                        .HasColumnType("int");

                    b.Property<string>("StorageMedium")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EditionID");

                    b.ToTable("AnimeEditionInfos");
                });

            modelBuilder.Entity("Models.DBModels.Collectible", b =>
                {
                    b.Property<int>("CollectiblesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollectiblesID"));

                    b.Property<bool>("Finalised")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medium")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title_German")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title_Japanese")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CollectiblesID");

                    b.ToTable("Collectibles");
                });

            modelBuilder.Entity("Models.DBModels.EditionInfo", b =>
                {
                    b.Property<int>("EditionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EditionID"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("CollectiblesID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Volume")
                        .HasColumnType("int");

                    b.HasKey("EditionID");

                    b.HasIndex("CollectiblesID");

                    b.ToTable("EditionInfos");
                });

            modelBuilder.Entity("Models.DBModels.Manga", b =>
                {
                    b.Property<int>("CollectiblesID")
                        .HasColumnType("int");

                    b.Property<string>("Autor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CollectiblesID");

                    b.ToTable("Manga");
                });

            modelBuilder.Entity("Models.DBModels.MangaEditionInfo", b =>
                {
                    b.Property<int>("EditionID")
                        .HasColumnType("int");

                    b.Property<int>("Endchapter")
                        .HasColumnType("int");

                    b.Property<bool>("FirstEdition")
                        .HasColumnType("bit");

                    b.Property<int>("Startchapter")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EditionID");

                    b.ToTable("MangaEditionInfos");
                });

            modelBuilder.Entity("Models.DBModels.Anime", b =>
                {
                    b.HasOne("Models.DBModels.Collectible", "Collectibles")
                        .WithOne("Anime")
                        .HasForeignKey("Models.DBModels.Anime", "CollectiblesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collectibles");
                });

            modelBuilder.Entity("Models.DBModels.AnimeEditionInfo", b =>
                {
                    b.HasOne("Models.DBModels.EditionInfo", "EditionInfo")
                        .WithOne("AnimeEditionInfo")
                        .HasForeignKey("Models.DBModels.AnimeEditionInfo", "EditionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditionInfo");
                });

            modelBuilder.Entity("Models.DBModels.EditionInfo", b =>
                {
                    b.HasOne("Models.DBModels.Collectible", "Collectibles")
                        .WithMany("EditionInfo")
                        .HasForeignKey("CollectiblesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collectibles");
                });

            modelBuilder.Entity("Models.DBModels.Manga", b =>
                {
                    b.HasOne("Models.DBModels.Collectible", "Collectibles")
                        .WithOne("Manga")
                        .HasForeignKey("Models.DBModels.Manga", "CollectiblesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collectibles");
                });

            modelBuilder.Entity("Models.DBModels.MangaEditionInfo", b =>
                {
                    b.HasOne("Models.DBModels.EditionInfo", "EditionInfo")
                        .WithOne("MangaEditionInfo")
                        .HasForeignKey("Models.DBModels.MangaEditionInfo", "EditionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditionInfo");
                });

            modelBuilder.Entity("Models.DBModels.Collectible", b =>
                {
                    b.Navigation("Anime");

                    b.Navigation("EditionInfo");

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("Models.DBModels.EditionInfo", b =>
                {
                    b.Navigation("AnimeEditionInfo");

                    b.Navigation("MangaEditionInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
